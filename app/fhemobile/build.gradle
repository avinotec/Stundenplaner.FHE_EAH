/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */
apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 28

    /**
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     *
     * This property is optional because the plugin uses a recommended version of
     * the build tools by default.
     */
    buildToolsVersion '29.0.2'

    compileOptions {
        // Error: Invoke-customs are only supported starting with Android O (--min-api 26)
        // solution: Java 8
        // Attention: desktop adds '' arround the string. Remove them
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }


    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 4
        versionName '3.0 (May 2019)'
    }

    // nötig ab AS 3 damit Flavors gehen
    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * This example creates a free and paid product flavor. Each product flavor
     * then specifies its own application ID, so that they can exist on the Google
     * Play Store, or an Android device, simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension.
     */
    flavorDimensions "version"
    productFlavors {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */

        eah {
            applicationId 'de.fhe.eahmobile'
            dimension "version"
        }
        fhe {
            applicationId "de.fhe.fhemobile"
            dimension "version"
        }
    }

    signingConfigs {
        release {
            //storeFile file('D:\\Projekt\\Mobile.AndroidStudio\\VideoChat2\\doc\\cert\\Keystore')
            //storeFile file('doc\\cert\\Keystore')
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
        debug {
            // Ein fester debug keystore damit, wenn man mit verschiedenen Rechnern arbeitet, die APK updaten kann.
            // Der dubug.keystore liegt im Projekt unter /app/debug.keystore und kann auch ausgetauscht werden.
            //storeFile file('debug.keystore')
            storePassword 'android'
        }
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            //minifyEnabled false
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            //pseudoLocalesEnabled true     MS
            pseudoLocalesEnabled false


            //schöneren APK Namen
            //archivesBaseName = "Stundenplan"

        }
        debug {
            debuggable true
            //schöneren APK Namen
            //archivesBaseName = "Stundenplan"
            // damit wir die debug Version parallel zu der release Version installieren können
            applicationIdSuffix ".debug"
            versionNameSuffix "-dev"
        }
    }

    // Lint found fatal errors while assembling a release target
    lintOptions {
        //checkReleaseBuilds false

        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'

        //junit stuff, not necessary
        exclude 'LICENCE.txt' // from old code
        exclude 'junit/runner/smalllogo.gif'
        exclude 'junit/runner/logo.gif'
        exclude 'LICENSE-junit.txt'
    }


}

/**
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 * To learn more, go to Add build dependencies.
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleDynamicVersion
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.viewpagerindicator:library:2.4.1@aar'
    implementation 'com.darwinsys:hirondelle-date4j:1.5.1'

    implementation 'com.github.applidium:HeaderListView:f9c33c21ae'
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'

    implementation 'com.google.firebase:firebase-analytics:17.2.0'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'


}

configurations.all {
    // instead of adding all the excludes per module, and MS did no longer figure out this XML Parser stuff,
    // we can exclude this Android mess from here for all configurations
    //disadvantage: Source Code compatibility muss auf Java 8 / 1.8 angehoben werden.
    //
    // https://github.com/x-stream/xstream/issues/117
    // Duplicate classes in xpp3_min and xmlpull #117

    //Duplicate class org.xmlpull.mxp1.MXParser found in modules xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c) and xpp3_min-1.1.4c.jar (xpp3:xpp3_min:1.1.4c)
    //Duplicate class org.xmlpull.v1.XmlPullParserFactory found in modules kxml2-2.3.0.jar (net.sf.kxml:kxml2:2.3.0) and xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c)
    //Duplicate class org.xmlpull.v1.XmlSerializer found in modules kxml2-2.3.0.jar (net.sf.kxml:kxml2:2.3.0) and xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c)
    exclude group: 'net.sf.kxml', module: 'kxml2'
    // exclude all from xpp3. Not only xpp3 or xpp3_min. '' is a wildcard
    exclude group: 'xpp3', module: ''


    exclude group: 'com.android.support', module: ''
}
apply plugin: 'com.google.gms.google-services'
