/*
 *  Copyright (c) 2014-2022 Fachhochschule Erfurt, Ernst-Abbe-Hochschule Jena
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */
//file:noinspection HardCodedStringLiteral
plugins {
    id 'com.android.application'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'
    // This is needed work with OpenAPI spec files to generate models, methods and API clients
    id "org.openapi.generator" version "7.5.0"
}

base {
    //schoeneren APK Namen
    archivesName = 'EAHStundenplanApp'
}

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    namespace 'de.eahjena.stundenplan'

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {
        applicationId 'de.eahjena.stundenplan'
        minSdk 21
        targetSdk 34
        versionCode = 56
        versionName = '4.7'

        // For Testing
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /*
        For example, if you are using a library that includes language resources (such as AppCompat or Google Play Services),
        then your APK includes all translated language strings for the messages in those libraries whether the rest of your
        app is translated to the same languages or not. If you'd like to keep only the languages that your app officially supports,
        you can specify those languages using the resConfig property. Any resources for languages not specified are removed.
         */
        // Keeps language resources for only the locales specified below.
        //resourceConfigurations += ['de', 'en', 'notnight']
        resourceConfigurations = ['de', 'en', 'notnight', 'notround']

        //MOSES
        Properties properties = new Properties()
        if (rootProject.file("local.properties").exists()) {
            properties.load(rootProject.file("local.properties").newDataInputStream())
            buildConfigField("String", "MOSES_API_KEY", properties.getProperty("MOSES_API_KEY"))
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }


	// noetig ab AS 3 damit Flavors gehen
    /**
     * The productFlavors block is where you can configure multiple product flavors.
     * This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors
     * are optional, and the build system does not create them by default.
     *
     * This example creates a free and paid product flavor. Each product flavor
     * then specifies its own application ID, so that they can exist on the Google
     * Play Store, or an Android device, simultaneously.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension.
     */
    flavorDimensions 'version'
    productFlavors {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        eah {
            dimension 'version'
            /* applicationId 'de.fhe.eahmobile' alte ID*/
            applicationId 'de.eahjena.stundenplan'

            // Debug App
            buildConfigField 'boolean', 'ALLOW_INVALID_CERTIFICATE', 'true'

        }
        fhe {
            dimension 'version'
            applicationId 'de.fhe.fhemobile'
        }
    }

    signingConfigs {
        release {
            //storeFile file('D:\\Projekt\\Mobile.AndroidStudio\\VideoChat2\\doc\\cert\\Keystore')
            //storeFile file('doc\\cert\\Keystore')
            storePassword 'EAHJena2019Stundenplan'
            keyAlias 'EAHStundenplan'
            keyPassword 'EAHJena2019Stundenplan'
            storeFile file('D:\\Projekt\\Mobile.AndroidStudio\\Stundenplaner.FHE_EAH.2019\\doc\\EAHKeystore')
            // storeFile file('D:\\Projekt\\Mobile.AndroidStudio\\Stundenplaner.FHE_EAH.2019\\doc\\EAHKeystore')
        }
        debug {
            // Ein fester debug keystore damit, wenn man mit verschiedenen Rechnern arbeitet, die APK updaten kann.
            // Der debug.keystore liegt im Projekt unter /app/debug.keystore und kann auch ausgetauscht werden.
            // storeFile file('debug.keystore')
            storePassword 'android'
        }
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            //TODO
            //minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            //TODO requires code shrinking, too
            //shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.

            proguardFiles(getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt')
            //proguardFiles ( getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt' )
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            //pseudoLocalesEnabled true     MS
            pseudoLocalesEnabled false
            renderscriptOptimLevel = 3

            //If you don't need to run a Crashlytics report, speed up your debug builds by disabling the plugin as follows:
            ext.enableCrashlytics = true
        }
        debug {
            debuggable true
            // damit wir die debug Version parallel zu der release Version installieren kï¿½nnen
            applicationIdSuffix '.debug'
            versionNameSuffix '-dev'
            //Disable Crashlytics for your debug builds
            //If you don't need to run a Crashlytics report, speed up your debug builds by disabling the plugin as follows:
            ext.enableCrashlytics = false
        }
    }
    packagingOptions {
        resources {
            resources.excludes += 'LICENCE.txt'
            resources.excludes += 'LICENSE-junit.txt'
            resources.excludes += 'okhttp3/internal/publicsuffix/publicsuffixes.gz'
            resources.excludes += 'plugin.xml'
            //resources.excludes += ''
            //resources.excludes += ''
            //resources.excludes += ''
            resources.excludes.add('META-INF/*')
            resources.excludes.add('junit/*')
        }
    }
    // Lint found fatal errors while assembling a release target
    lint {
        abortOnError false
        showAll true
    }

    namespace 'de.fhe.fhemobile'
    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

}

java {
    /* sourceCompatibility JavaVersion.VERSION_1_8 */
    /* targetCompatibility JavaVersion.VERSION_1_8 */
}


/**
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 * To learn more, go to Add build dependencies.
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.8.5'
    implementation 'androidx.navigation:navigation-ui:2.8.5'

    //new gesture actions
    implementation 'androidx.activity:activity:1.10.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    //Swipe to refresh
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    //Settings
    implementation 'androidx.preference:preference:1.2.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.9.1'


    // ------------ okhttp ------------------------
    //The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack
    // support for **TLS 1.2** and should not be used. But because upgrading is difficult, we will backport
    // critical fixes to the 3.12.x branch through December 31, 2021.
    implementation('com.squareup.okhttp3:okhttp:5.0.0-alpha.14')
    // define a BOM and its version
    //implementation(platform("com.squareup.okhttp3:okhttp-bom:3.12.0"))
    //implementation("com.squareup.okhttp3:logging-interceptor")

    // OkHttp works on Android 5.0+ (API level 21+) and Java 8+.        <------ we run at SDK16
    // The latest release is available on Maven Central.
    //implementation("com.squareup.okhttp3:okhttp:4.9.3")
    // define a BOM and its version
    //implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))

    // define any required OkHttp artifacts without version
    //implementation('com.squareup.okhttp3:okhttp')
    //implementation("com.squareup.okhttp3:logging-interceptor")
    // ------------ okhttp ------------------------
    
    
    implementation 'com.google.firebase:firebase-analytics:22.1.2'

    // Testing-only dependencies
    //testImplementation 'junit:junit:4.13.2'
    implementation 'junit:junit:4.13.2'
    //androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //retrieving images
    implementation 'com.squareup.picasso:picasso:2.71828'

    //Barcode scanner
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:33.7.0')
    implementation 'com.google.firebase:firebase-messaging:24.1.0'
    implementation 'com.google.firebase:firebase-inappmessaging-display:21.0.1'
	implementation 'com.google.firebase:firebase-crashlytics:19.3.0'
    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:22.1.2'

    implementation 'com.google.gms:google-services:4.4.2'
    implementation platform('com.google.firebase:firebase-inappmessaging-display-ktx:21.0.1')
    implementation 'com.google.android.gms:play-services-base:18.5.0'

    // Adds libraries defining annotations to only the compile classpath.
    compileOnly 'com.google.dagger:dagger:2.55'
    // Adds the annotation processor dependency to the annotation processor classpath.
    annotationProcessor 'com.google.dagger:dagger-compiler:2.55'
    
    //implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10'
    implementation(platform('org.jetbrains.kotlin:kotlin-bom:2.1.0'))


	// release version braucht einen simple logger
	implementation 'org.slf4j:slf4j-simple:2.0.16'

    implementation 'com.github.bumptech.glide:glide:4.16.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.16.0'
    /**
     * The following block is needed for openApiGenerate's output to work.
     * There should be a Gradle (and POM) file which lists the dependencies
     * needed if it differs in different configs.
     */
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.11.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'

    // MOSES --------------------------------------------------------------------
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.gsonfire:gson-fire:1.9.0'

    //noinspection GradleDependency -- DO NOT UPDATE
    implementation('org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.2') {
        exclude group: 'org.apache.oltu.oauth2', module: 'org.apache.oltu.oauth2.common'
    }
}

configurations.configureEach {
    // https://github.com/x-stream/xstream/issues/117
    // Duplicate classes in xpp3_min and xmlpull #117
    //Duplicate class org.xmlpull.mxp1.MXParser found in modules xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c) and xpp3_min-1.1.4c.jar (xpp3:xpp3_min:1.1.4c)
    //Duplicate class org.xmlpull.v1.XmlPullParserFactory found in modules kxml2-2.3.0.jar (net.sf.kxml:kxml2:2.3.0) and xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c)
    //Duplicate class org.xmlpull.v1.XmlSerializer found in modules kxml2-2.3.0.jar (net.sf.kxml:kxml2:2.3.0) and xpp3-1.1.4c.jar (xpp3:xpp3:1.1.4c)
    exclude group: 'net.sf.kxml', module: 'kxml2'
    // exclude all from xpp3. Not only xpp3 or xpp3_min. '' is a wildcard
    exclude group: 'xpp3', module: 'xpp3'
    exclude group: 'xpp3', module: 'xpp3_min'

    // exclude old depencendies on pre-AndroidX dependencies
    exclude group: 'com.android.support', module: ''

    // Compile SDK 33
    exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
}


apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'org.openapi.generator'

def openApiSpecInputFile =
    "${rootDir}/fhemobile/src/main/java/de/fhe/fhemobile/api/openapi/openapi-moses-eah.yaml"
def openApiOutputPath =
    project.layout.buildDirectory.dir("openapi-generated").get().asFile.path

openApiGenerate {
    // Windows: openApiSpecInputFile: D:\Projekt\Mobile.AndroidStudio\Stundenplaner.FHE_EAH.2019\app/fhemobile/src/main/java/de/fhe/fhemobile/api/openapi/openapi-moses-eah.yaml
    //println("openApiSpecInputFile: ${openApiSpecInputFile}")
    // convert to Unix for the fucking underlying Swagger classes
    openApiSpecInputFile = openApiSpecInputFile.replace("\\","/");
    // Unix/Swagger: openApiSpecInputFile: D:/Projekt/Mobile.AndroidStudio/Stundenplaner.FHE_EAH.2019/app/fhemobile/src/main/java/de/fhe/fhemobile/api/openapi/openapi-moses-eah.yaml
    //println("openApiSpecInputFile: ${openApiSpecInputFile}")

    generatorName.set("java")
    library = "retrofit2"
    typeMappings = ["time": "LocalTime"]
    inputSpec.set(openApiSpecInputFile)
    outputDir = openApiOutputPath
    //verbose = true
    generateApiDocumentation = true
    //skipValidateSpec = true
}

//openApiMeta {
//    generatorName.set("Moses")
//    packageName.set("fhemobile.moses")
//}

openApiValidate {
    //println("openApiSpecInputFile: ${openApiSpecInputFile}")

    inputSpec.set(openApiSpecInputFile)
    recommend.set(true)
}

/**
 * openApiGenerate will run before any build
 */
tasks.preBuild {
    dependsOn("openApiValidate")
    //dependsOn("openApiMeta")
    dependsOn("openApiGenerate")
}

/**
 * To use files generated by openAPIGenerate,
 * these must be added to the sourceSets so that they are known in the project.
 */
android {
    compileSdk 35
    sourceSets {
        main {
            java {
                srcDir(openApiOutputPath + "/src/main/java")
            }
        }
    }
}
